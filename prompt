Project Overview
Develop a comprehensive GPA calculator system for students that includes user authentication, course input for GPA calculation, and an admin interface for managing submitted transcript applications. The system should be robust and modular, integrating all functionalities into a single application.

Technology Stack
â€¢	Frontend: HTML5, CSS3, JavaScript, Bootstrap

User Stories
For Students
1.	Login:
o	As a student, I want to log in using my credentials so that I can access my GPA calculation and transcript application functionalities.
2.	Calculate GPA:
o	As a student, I want to input my course details (course name, course code, credit hrs, marks, semester) so that I can calculate my GPA & CGPA. I shall be able to see the generated grade points and grades for each course as per BU grading policy.
o	As a student, I want to see the calculated GPA after submitting my course details.
o	As a Student, I shall be able import the required information about courses, credit hrs, marks, semester etc. in an excel file. 
3.	Submit Transcript Application:
o	As a student, I want to submit an application for my transcript so that I can receive it from the exam department.

For Admins (Exam Department)
1.	Login:
o	As an admin, I want to log in using my credentials so that I can manage transcript applications.
2.	View Applications:
o	As an admin, I want to view all submitted transcript applications so that I can process them.
3.	Update Application Status:
o	As an admin, I want to update the status of a transcript application (Underprocess, Ready to Collect) so that students are informed about the progress.
4.	Delete Application:
o	As an admin, I want to delete an application so that I can manage the application records efficiently.

Functional Requirements
Authentication and Authorization
1.	The system should support user registration and login using JWT for authentication.
2.	Users should be able to log in using their username and password.
3.	JWT tokens should be used to authenticate requests to the backend.
GPA Calculation
1.	The GPA calculation page should allow students to input multiple courses with their respective grades and credits.
2.	The system should calculate the GPA based on the input and display the result.
3.	The calculation should convert letter grades to grade points using a predefined scale.
Transcript Application Submission
1.	The system should allow students to submit their transcript applications.
2.	The application form should include fields for student name, student ID, program, and contact information.
3.	Submitted applications should be stored in the database for admin review.
Admin Interface
1.	Admins should have a separate login interface.
2.	Admins should be able to view all submitted transcript applications.
3.	Admins should be able to update the status of an application.
4.	Admins should be able to delete an application.

Non-Functional Requirements
1.	Performance:
o	The system should handle concurrent users efficiently.
2.	Security:
o	Sensitive data should be encrypted.
o	Authentication should be secure and resilient against attacks.
3.	Usability:
o	The user interface should be intuitive and easy to use.
4.	Scalability:
o	The system should be scalable to accommodate future enhancements.

Grading Scale for Bahria University
Bahria University follows a specific grading scale to assign grade points to letter grades. Here is the grading scale:
Letter Grade	Grade Points	Marks
A	4.0	85
A-	3.7	80
B+	3.3	75
B	3.0	71
B-	2.7	68
C+	2.3	64
C	2.0	60
C-	1.7	57
D+	1.3	53
D	1.0	50
F	0.0	0-49


Backend is already developed and deployed.

Develop the frontend for the student only, we will develop frontend for admin separately.

UI must be excellent.

Backend Endpoints:
Auth/Users:
http://localhost:3000/api/users
router.post('/register', register);
router.post('/login', login);

http://localhost:3000/api/gpa'
router.post('/calculate', authMiddleware, calculateGPA);
const calculateGPA = async (req, res) => {
  const { courses } = req.body;
  const userId = req.user.id;

  try {
    for (const course of courses) {
      await createCourse(userId, course.courseName, course.courseCode, course.creditHours, course.marks, course.semester);
    }

    const userCourses = await getCoursesByUserId(userId);
    const gpa = calculateGPAFromCourses(userCourses);
    res.json({ gpa });
  } catch (error) {
    res.status(500).json({ message: 'Error calculating GPA', error });
  }
};

const calculateGPAFromCourses = (courses) => {
  let totalPoints = 0;
  let totalCredits = 0;

  for (const course of courses) {
    const gradePoint = getGradePoint(course.marks);
    totalPoints += gradePoint * course.creditHours;
    totalCredits += course.creditHours;
  }

  return totalPoints / totalCredits;
};

const getGradePoint = (marks) => {
  if (marks >= 85) return 4.0;
  if (marks >= 80) return 3.7;
  if (marks >= 75) return 3.3;
  if (marks >= 71) return 3.0;
  if (marks >= 68) return 2.7;
  if (marks >= 64) return 2.3;
  if (marks >= 60) return 2.0;
  if (marks >= 57) return 1.7;
  if (marks >= 53) return 1.3;
  if (marks >= 50) return 1.0;
  return 0.0;
};

http://localhost:3000/api/transcripts'
router.post('/submit', authMiddleware, submitTranscriptApplication);
const submitTranscriptApplication = async (req, res) => {
  const { studentName, studentId, program, contactInfo } = req.body;
  const userId = req.user.id;

  try {
    const transcriptId = await createTranscript(userId, studentName, studentId, program, contactInfo);
    res.status(201).json({ transcriptId });
  } catch (error) {
    res.status(500).json({ message: 'Error submitting transcript application', error });
  }
};

http://localhost:3000/api/admin'
router.get('/applications', authMiddleware, viewApplications);
router.put('/applications/status', authMiddleware, updateApplicationStatus);
router.delete('/applications', authMiddleware, deleteApplication);


Database Structure:
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('student', 'admin') NOT NULL
);

CREATE TABLE courses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    course_name VARCHAR(100),
    course_code VARCHAR(50),
    credit_hours INT,
    marks INT,
    semester VARCHAR(20),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE transcripts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    student_name VARCHAR(100),
    student_id VARCHAR(50),
    program VARCHAR(100),
    contact_info VARCHAR(100),
    status ENUM('Underprocess', 'Ready to Collect') DEFAULT 'Underprocess',
    FOREIGN KEY (user_id) REFERENCES users(id)
);